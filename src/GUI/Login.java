/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Network.Config;
import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import org.json.JSONObject;

/**
 *
 * @author mthuan
 */
public class Login extends javax.swing.JFrame {

    Socket socket;
    BufferedReader input = null;
    BufferedWriter output = null;
    Chat_Room chatroom;

    /**
     * Creates new form Login
     */
    public Login() {
        initComponents();
        initDisplay();
        initSocket();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        header = new javax.swing.JPanel();
        AppName = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        closePanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        uname = new javax.swing.JTextField();
        joinChatBtn = new javax.swing.JButton();
        sms = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        header.setPreferredSize(new java.awt.Dimension(400, 50));
        header.setLayout(new javax.swing.BoxLayout(header, javax.swing.BoxLayout.LINE_AXIS));

        AppName.setBackground(new java.awt.Color(115, 82, 246));
        AppName.setPreferredSize(new java.awt.Dimension(50, 50));

        jLabel2.setFont(new java.awt.Font("BrushScript", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(254, 254, 254));
        jLabel2.setText("Chat App");

        javax.swing.GroupLayout AppNameLayout = new javax.swing.GroupLayout(AppName);
        AppName.setLayout(AppNameLayout);
        AppNameLayout.setHorizontalGroup(
            AppNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AppNameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(155, 155, 155))
        );
        AppNameLayout.setVerticalGroup(
            AppNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        header.add(AppName);

        closePanel.setBackground(new java.awt.Color(115, 82, 246));
        closePanel.setPreferredSize(new java.awt.Dimension(58, 100));

        javax.swing.GroupLayout closePanelLayout = new javax.swing.GroupLayout(closePanel);
        closePanel.setLayout(closePanelLayout);
        closePanelLayout.setHorizontalGroup(
            closePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 203, Short.MAX_VALUE)
        );
        closePanelLayout.setVerticalGroup(
            closePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        header.add(closePanel);

        getContentPane().add(header, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(254, 254, 254));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(115, 82, 246));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Nhập Tên Của Bạn:");

        uname.setFont(new java.awt.Font("Arimo", 0, 24)); // NOI18N
        uname.setForeground(new java.awt.Color(115, 82, 246));

        joinChatBtn.setBackground(new java.awt.Color(115, 82, 246));
        joinChatBtn.setFont(new java.awt.Font("Arimo", 0, 24)); // NOI18N
        joinChatBtn.setForeground(new java.awt.Color(254, 254, 254));
        joinChatBtn.setText("Vào Chat");
        joinChatBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                joinChatBtnMouseClicked(evt);
            }
        });

        sms.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        sms.setForeground(new java.awt.Color(115, 82, 246));
        sms.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(uname, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(joinChatBtn)))
                .addContainerGap(40, Short.MAX_VALUE))
            .addComponent(sms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(uname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(joinChatBtn)
                .addGap(29, 29, 29)
                .addComponent(sms, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 290, 270));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/login_bg.png"))); // NOI18N
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 400));

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void joinChatBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_joinChatBtnMouseClicked
        // TODO add your handling code here:
        String name = uname.getText();System.out.println(uname.getText());

        if (name.equals("")) {
            sms.setText("Vui lòng nhập tên người dùng");
            return;
        }
        if (name.replaceAll(" ", "") .equals("")) {
            sms.setText("Vui lòng nhập tên người dùng");
            return;
        }
        if (checkRegex(name, Pattern.compile("[^A-Za-z0-9]\\s", Pattern.CASE_INSENSITIVE))) {
            sms.setText("Tên không được chứa ký tự đặc biệt");
            return;
        }
        if (!checkValidUserName(name)) {
            sms.setText("Tên phải có ít nhất 1 chữ cái");
            return;
        }
        if (name.length() < 3) {
            sms.setText("Tên phải có độ dài >= 3 ký tự");
            return;
        }

        JSONObject json = new JSONObject();
        json.put("cmd", "USER_LOGIN");
        json.put("data", name);

        try {
            output.write(json.toString());
            output.newLine();
            output.flush();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_joinChatBtnMouseClicked

    public static boolean checkRegex(String emailStr, Pattern pt) {
        Matcher matcher = pt.matcher(emailStr);
        return matcher.find();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AppName;
    private javax.swing.JPanel closePanel;
    private javax.swing.JPanel header;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton joinChatBtn;
    private javax.swing.JLabel sms;
    private javax.swing.JTextField uname;
    // End of variables declaration//GEN-END:variables

    private void initDisplay() {
        this.setLocationRelativeTo(null);
        uname.setBackground(new Color(0, 0, 0, 0));
        uname.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(115, 82, 246)));
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent we) {
                int choose = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn thoát ?", "Xác nhận", JOptionPane.YES_NO_OPTION);
                if (choose == 0) {
                    try {
                        BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                        JSONObject obj = new JSONObject();
                        obj.put("cmd", "CLOSE_CHAT");

                        output.write(obj.toString());
                        output.newLine();
                        output.flush();
                        if (chatroom != null) {
                            chatroom.terminal();
                            sms.setText("Vui lòng chờ....");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    System.exit(0);
                }
            }
        });
    }

    private void initSocket() {
        try {
            socket = new Socket(Config.HOST, Config.PORT);
            input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

            new Thread(new readIO(input, output)).start();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Không thể kết nối đến Server !!! ["+ex.getMessage()+"]");
            System.exit(0);
        }

    }

    private boolean checkValidUserName(String name) {
        name = name.replaceAll(" ", "");
        try {
            Integer.parseInt(name);
            return false;
        } catch (Exception e) {
            return true;
        }
    }

    private class readIO implements Runnable {

        BufferedReader input;
        BufferedWriter output;

        public readIO(BufferedReader input, BufferedWriter output) {
            this.input = input;
            this.output = output;
        }

        @Override
        public void run() {
            try {
                while (true) {
                    String result = input.readLine();

                    if (result == null) {
                        break;
                    }
                    System.out.println(result);
                    JSONObject obj = new JSONObject(result);
                    executeCommand(obj);

                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

        private void executeCommand(JSONObject json) {
            switch (json.getString("cmd")) {
                case "USER_LOGIN": {
                    if (json.getString("data").equals("SUCCESS")) {
                        joinChatBtn.setVisible(false);
                        uname.setEnabled(false);
                        sms.setText("Vui lòng chờ....");
                        return;
                    }
                    sms.setText("Username đã được sử dụng");
                    break;
                }
                case "INVITE_CONNECT": {
                    int choose = JOptionPane.showConfirmDialog(null, "Bạn có muốn chat với " + json.getString("data") + " ?", "Xác nhận chat", JOptionPane.YES_NO_OPTION);
                    if (choose == 0) {
                        // Chap nhan ket noi
                        sms.setText("Vui lòng chờ đối phương xác nhận...");
                        JSONObject jsonReject = new JSONObject();
                        jsonReject.put("cmd", "ACCEPT_CONNECT");

                        try {
                            output.write(jsonReject.toString());
                            output.newLine();
                            output.flush();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else {
                        // Tu choi ket noi
                        JSONObject jsonReject = new JSONObject();
                        jsonReject.put("cmd", "REJECT_CONNECT");
                        sms.setText("Vui lòng chờ....");

                        try {
                            output.write(jsonReject.toString());
                            output.newLine();
                            output.flush();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    break;
                }
                case "CLIENT_REJECT_CONNECT": {
                    sms.setText("Vui lòng chờ....");
                    JOptionPane.showMessageDialog(null, "Đối phương đã từ chối kết nối");
                    break;
                }
                case "CLIENT_NULL_CONNECT": {
                    sms.setText("Vui lòng chờ....");
                    JOptionPane.showMessageDialog(null, "Đối phương không còn hoạt động");
                    break;
                }
                case "CLIENT_WAIT_CONNECT": {
                    sms.setText("Vui lòng chờ đối phương chấp nhận");
                    break;
                }
                case "CLIENT_CONNECTED": {
                    chatroom = new Chat_Room(socket, uname.getText());
                    chatroom.setVisible(true);
                    sms.setText("Đã kết nối");

                    chatroom.addWindowListener(new WindowAdapter() {
                        public void windowClosing(WindowEvent we) {
                            int choose = JOptionPane.showConfirmDialog(null, "Bạn có muốn kết thúc việc chat ở đây không ? Mọi tin nhắn sẽ bị xóa !!!", "Xác nhận", JOptionPane.YES_NO_OPTION);
                            if (choose == 0) {
                                try {
                                    BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                                    JSONObject obj = new JSONObject();
                                    obj.put("cmd", "CLOSE_CHAT");

                                    output.write(obj.toString());
                                    output.newLine();
                                    output.flush();
                                    if (chatroom != null) {
                                        chatroom.terminal();
                                        sms.setText("Vui lòng chờ....");
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                    });
                    break;
                }
                case "END_CHAT": {
                    if (chatroom != null) {
                        chatroom.terminal();
                    }
                    sms.setText("Vui lòng chờ....");
                    break;
                }
                case "ADD_NEW_MESS": {
                    if (chatroom != null) {
                        chatroom.addMessReceive(json.getString("username"), json.getString("mess"));
                    }
                }
            }
        }
    }
}
